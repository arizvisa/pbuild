building dependencies with paths needs to be tested
write different types of build scenarios
all variables need to be hidden when executing ./build.list

features that make supports:
    -A - make all errors non-fatal
    -C - change to directory
    -d - debugging information
    -f - use specified makefile
    -j - parallel building
    -q - question mode (1 on failure, 0 on success)

add platform independance:
    cc - c compiler
    link - linker
    asm - assembler
    chdir - switch to a directory
    rm - remove a file
    chmod - modify permissions (if supported)
    cp - copy a file
    touch - mark a file as updated

# TODO:
#   add some more commandline options
#       -F to force building a target
#       -c for cleaning up intermediary files necessary for building a target
#
#   allow support for external dependencies.
#       this is for targets that don't have a rule to build them.
#           like if the user is responsible for placing them into the filesystem
#       maybe these deps can be prefixed with '@' or '!' or maybe '+' to
#           identify them. i need to steal a char that isn't supported by the fs
#       i.e.:   resolve whatev.obj compile whatever.c blah.h @config.h
#               resolve prog1.exe link whatev.obj !kernel32.lib +user32.lib
#
#   add support for pseudo targets. these are targets that don't have any tangible
#   data produced from it. this can be used for joining together multiple targets
#   under one target and processing them via a rule.
#   i.e.:  resolve module1.obj compile module1.c @dep1.h @dep2.h
#          resolve module1.dll sharedobject module1.obj @user32.lib @kernel32.lib
#          alias build-modules verify module1.dll module2.dll module3.dll
#          alias check-config generateConfig
#          alias all update %check-config %build-modules program1.exe
#
#   implement support for the user to specify prerequisite targets
#       this is a rule that is required to be run before any other rules
#       like for determining any type of environmental options, or setting
#       configuration parameters for the target.
#       perhaps also some way of choosing the compiler.
#       maybe the command could be "requisite target1 target2 target3"
#   i.e.:  resolve module1.obj compile module1.c @dep1.h @dep2.h
#          resolve module1.dll sharedobject module1.obj @user32.lib @kernel32.lib
#          requisite AskUserForConfig
#
#   implement some way to clean up files produced by a target
#       maybe this can be done via a rule that just removes all targets that are
#       also deps or a commandline option that can take a rule and will walk all
#       deps form a target.
#       i.e.:   pbuild -c whatev.obj
#                  # find all deps for whatev.obj, check if they're also
#                  # targets then delete htm
#
#   implement support for the user to specify a default target
#       by default if a rule isn't specified, have some way to specify
#       the default target to build
#       i.e.:   resolve prog1.exe link prog1.obj prog2.obj heh.lib @kernel32.lib
#               pseudo mybuildeverythingrule prog1.exe prog2.exe prog3.exe
#               default mybuildeverythingrule
#
#   implement some generic rules
#       such as updating timestamps of all deps
#       chaining rules to multiple other rules
#           and/all -- would return success if all of the deps were built
#           or/any -- would return success if any of the deps were built
#       compile, link, lib, assemble
#
#   provide a function library for rules to utilize
#        a function that converts a unix-path to a native-style path
#        mapping a ':' separated list to something else like '/I$_'
#        updating the timestamp of an arbitrary file
#        letting a rule know what platform it's being built on
#        this can allow custom environment variables to be passed to rules
#        chopping up a file into its components (like basename)
#        some basic string matching, like .startswith from python
#        a command ("noisy") for echoing the commandline options as well as
#            executing it
#        ways of escaping paths, like for m$ tools which have paths with spaces
#
#   provide some sort of automatic build-environment detection
#       determine what are the correct paths for building
#       this can also be used to provide paths and commands for
#           a generic compile, link, or lib rule
#
#   rebuild workspace if pbuild.sh is newer than workspace

